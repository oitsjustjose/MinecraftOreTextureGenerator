name: Build MOTG Cross-Platform

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  prebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_SHA: ${{ env.GITHUB_SHA }}
        with:
          tag_name: "indev-$GITHUB_SHA"
          release_name: "Prerelease from Commit $GITHUB_SHA"
          draft: false
          prerelease: true
      - name: Store Release ID
        run: |
          echo "{release_id}={steps.create_release.outputs.id}" >> $GITHUB_ENV

  build:
    needs: [prebuild]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{matrix.os}}

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -U pyinstaller
    - name: Build with PyInstaller
      run: |
        pyinstaller -D -F -n generate -c -n MOTD-${{matrix.os}} ./generate.py
    - name: Create Release
      uses: actions/github-script@v2
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs').promises;
          for (let file of await fs.readdir('./dist')) {
            console.log('uploading', `./dist/${file}`);
            await github.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: file,
              release_id: '${{env.release_id}}',
              data: await fs.readFile(`./dist/${file}`)
            });            
          }
